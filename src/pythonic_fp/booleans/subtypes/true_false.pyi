from ..subtypable import SBool
from collections.abc import Hashable
from typing import Final, TypeVar

__all__ = ['TF_Boolean', 'TF_Bool', 'T_Bool', 'F_Bool', 'ALWAYS', 'NEVER']

I = TypeVar('I', bound=int)

class TF_Bool(SBool):
    def __new__(cls, witness: object, flavor: Hashable = ...) -> TF_Bool: ...
    def __invert__(self) -> TF_Bool: ...
    def __and__(self, other: I) -> TF_Bool: ...
    def __rand__(self, other: I) -> TF_Bool: ...
    def __or__(self, other: I) -> TF_Bool: ...
    def __xor__(self, other: I) -> TF_Bool: ...

class T_Bool(TF_Bool):
    def __new__(cls, witness: object = ..., flavor: Hashable = ...) -> T_Bool: ...

class F_Bool(TF_Bool):
    def __new__(cls, witness: object = ..., flavor: Hashable = ...) -> F_Bool: ...
TF_Boolean = T_Bool | F_Bool | TF_Bool
ALWAYS: Final[TF_Boolean]
NEVER: Final[TF_Boolean]
