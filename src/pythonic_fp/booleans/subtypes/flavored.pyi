from ..subtypable import SBool
from collections.abc import Hashable
from typing import TypeVar

__all__ = ['FBool', 'truthy', 'falsy']

I = TypeVar('I', bound=int)

class FBool(SBool):
    def __new__(cls, witness: object, flavor: Hashable) -> FBool: ...
    def __init__(self, witness: object, flavor: Hashable) -> None: ...
    def __invert__(self) -> FBool: ...
    def __and__(self, other: I) -> SBool: ...
    def __rand__(self, other: I) -> SBool: ...
    def __or__(self, other: I) -> SBool: ...
    def __ror__(self, other: I) -> SBool: ...
    def __xor__(self, other: I) -> SBool: ...
    def __rxor__(self, other: I) -> SBool: ...
    def flavor(self) -> Hashable: ...

def truthy(flavor: Hashable) -> FBool: ...
def falsy(flavor: Hashable) -> FBool: ...
