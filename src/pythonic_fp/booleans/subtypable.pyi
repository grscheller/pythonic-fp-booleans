from collections.abc import Hashable
from typing import Final, Never, overload

__all__ = ['SBool', 'snot', 'TRUTH', 'LIE']

class SBool(int):
    @overload
    def __new__(cls) -> SBool: ...
    @overload
    def __new__(cls, witness: object) -> SBool: ...
    def __init__(self, witness: object = False, flavor: Hashable = ...) -> None: ...
    def __invert__(self) -> SBool: ...
    def __and__(self, other: int) -> SBool | Never: ...
    def __rand__(self, other: int) -> SBool | Never: ...
    def __or__(self, other: int) -> SBool | Never: ...
    def __ror__(self, other: int) -> SBool | Never: ...
    def __xor__(self, other: int) -> SBool | Never: ...
    def __rxor__(self, other: int) -> SBool | Never: ...

def snot(sbool: SBool) -> SBool: ...

TRUTH: Final[SBool]
LIE: Final[SBool]
